'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _cliEngineConfig = require('cli-engine-config');

var _httpCall = require('http-call');

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

var _cliUx = require('cli-ux');

var _cliUx2 = _interopRequireDefault(_cliUx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Command {

  static get id() {
    let cmd = [];
    if (this.topic) cmd.push(this.topic);
    if (this.command) cmd.push(this.command);
    return cmd.join(':');
  }

  /**
   * instantiate and run the command setting {mock: true} in the config (shorthand method)
   */
  static async mock(...argv) {
    argv.unshift('argv0', 'cmd');
    _cliUx2.default.config.mock = true;
    return this.run({ argv, mock: true });
  }

  /**
   * instantiate and run the command
   */
  static async run(config) {
    const cmd = new this({ config });
    try {
      await cmd.init();
      await cmd.run();
      await _cliUx2.default.done();
    } catch (err) {
      _cliUx2.default.error(err);
    }
    return cmd;
  }

  constructor(options = {}) {
    this.flags = {};
    this.args = {};

    this.config = (0, _cliEngineConfig.buildConfig)(options.config);
    this.argv = this.config.argv;

    this.http = _httpCall.HTTP.defaults({
      headers: {
        'user-agent': `${this.config.name}/${this.config.version} (${this.config.platform}-${this.config.arch}) node-${process.version}`
      }
    });
  }

  get cli() {
    let deprecate = process.env.DEBUG ? require('util').deprecate : (fn, _) => () => fn();
    return deprecate(() => require('cli-ux').default, 'this.out and this.cli is deprecated. Please import the "cli-ux" module directly instead.')();
  }
  get out() {
    return this.cli;
  }

  async init() {
    const parser = new _parser2.default({
      flags: this.constructor.flags || {},
      args: this.constructor.args || [],
      variableArgs: this.constructor.variableArgs,
      cmd: this
    });
    const { argv, flags, args } = await parser.parse({ flags: this.flags, argv: this.argv.slice(2) });
    this.flags = flags;
    this.argv = argv;
    this.args = args;
  }

  // prevent setting things that need to be static


  /**
   * actual command run code goes here
   */
  async run(...rest) {}

  get stdout() {
    return _cliUx2.default.stdout.output;
  }

  get stderr() {
    return _cliUx2.default.stderr.output;
  }

  static buildHelp(config) {
    let help = new _help2.default(config);
    return help.command(this);
  }

  static buildHelpLine(config) {
    let help = new _help2.default(config);
    return help.commandLine(this);
  }
}
exports.default = Command; // eslint-disable-line

Command.aliases = [];
Command.variableArgs = false;
Command.args = [];
Command._version = _package2.default.version;