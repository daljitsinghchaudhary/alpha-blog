"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const color_1 = require("@heroku-cli/color");
const command_1 = require("@heroku-cli/command");
const cli_ux_1 = require("cli-ux");
const ts_lodash_1 = require("ts-lodash");
class Status extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const moment = require('moment');
            const sprintf = require('sprintf-js').sprintf;
            const apiPath = '/api/v4/current-status';
            const capitalize = (str) => str.substr(0, 1).toUpperCase() + str.substr(1);
            const printStatus = (status) => {
                const colorize = color_1.default[status];
                let message = capitalize(status);
                if (status === 'green') {
                    message = 'No known issues at this time.';
                }
                return colorize(message);
            };
            let host = process.env.HEROKU_STATUS_HOST || 'https://status.heroku.com';
            let { body } = yield this.http.get(host + apiPath);
            if (this.flags.json) {
                cli_ux_1.default.styledJSON(body);
                return;
            }
            for (let item of body.status) {
                let message = printStatus(item.status);
                cli_ux_1.default.log(sprintf('%-10s %s', item.system + ':', message));
            }
            for (let incident of body.incidents) {
                cli_ux_1.default.log();
                cli_ux_1.default.styledHeader(`${incident.title} ${color_1.default.yellow(moment(incident.created_at).format('LT'))} ${color_1.default.cyan(incident.full_url)}`);
                let padding = ts_lodash_1.default.maxBy(incident.updates, 'update_type.length').update_type.length + 0;
                for (let u of incident.updates) {
                    cli_ux_1.default.log(`${color_1.default.yellow(ts_lodash_1.default.padEnd(u.update_type, padding))} ${moment(u.updated_at).format('LT')} (${moment(u.updated_at).fromNow()})`);
                    cli_ux_1.default.log(`${u.contents}\n`);
                }
            }
        });
    }
}
Status.description = 'display current status of the Heroku platform';
Status.flags = {
    json: command_1.flags.boolean({ description: 'output in json format' }),
};
exports.default = Status;
